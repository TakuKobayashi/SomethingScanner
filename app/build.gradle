apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'org.jetbrains.dokka-android'

def properties = loadLocalProperties();

android {
    compileSdkVersion 29
    defaultConfig {
        def versionNameList = "$application_version".split(/\./)
        def powCounter = versionNameList.size()
        def versionNumbers = versionNameList.collect{numberString -> numberString.toInteger()}
        def versionNumber = versionNumbers.sum{ number ->
            powCounter = powCounter - 1
            (Math.pow(100, powCounter) * number).toInteger()
        }
        applicationId "net.taptappun.taku.kobayashi.somethingscanner"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode versionNumber
        versionName application_version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            if(!properties.getProperty("RELEASE_STORE_FILE", "").empty){
                storeFile file(properties.getProperty("RELEASE_STORE_FILE", ""))
            }
            storePassword properties.getProperty("RELEASE_STORE_PASSWORD", "")
            keyAlias properties.getProperty("RELEASE_KEY_ALIAS", "")
            keyPassword properties.getProperty("RELEASE_KEY_PASSWORD", "")
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            // 使われていないResourceファイルをビルドするときに含めないことでアプリサイズを減らす設定を有効にする
            shrinkResources true
            // 使われていないソースコードを削ってビルドすることでアプリサイズを減らす設定を有効にする
            minifyEnabled true
            // proguard-android-optimize.txtにすることでより高精度のコード圧縮になる。またLogを出力しない設定を適用させる場合もこの設定で圧縮をかける
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

private def loadLocalProperties() {
    // local.propertiesの読み込み
    Properties properties = new Properties()
    def localPropertiesFile = project.rootProject.file('local.properties');
    if(!localPropertiesFile.exists()){
        localPropertiesFile.createNewFile();
    }
    properties.load(localPropertiesFile.newDataInputStream())
    return properties
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.firebase:firebase-core:17.2.0'
    implementation 'com.google.firebase:firebase-ml-vision:23.0.0'
    implementation 'com.google.firebase:firebase-messaging:20.0.0'
    implementation 'com.google.firebase:firebase-analytics:17.2.0'
    implementation 'com.github.navasmdc:MaterialDesign:1.5@aar'
    implementation 'net.taptappun.taku.kobayashi:runtimepermissionchecker:1.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

ktlint {
    version = "0.34.2"
    android = true
    ignoreFailures = true
    additionalEditorconfigFile = file(".editorconfig")
}

dokka {
    outputFormat = 'html'
    sourceDirs = files('src/main')
    outputDirectory = "$buildDir/documents"
}

if(!properties.getProperty("GOOGLE_PLAY_PUBLISH_API_CONFIG_FILE", "").empty){
    apply plugin: 'com.github.triplet.play'

    play{
        serviceAccountCredentials = file(properties.getProperty("GOOGLE_PLAY_PUBLISH_API_CONFIG_FILE", ""))
        artifactDir = file("build/outputs/bundle/release/")
        // リリースのStatus completed/draft/inProgress/halted のどれか(defaultは completed) inProgressだと部分公開という意味
        releaseStatus = "draft"
        // ストアにあるバージョンがConflictsしたらどうするか設定する autoは自動的に正しいバージョンを設定するという意味
        resolutionStrategy = "auto"
    }
}